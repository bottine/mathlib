/-
Copyright (c) 2022 Floris van Doorn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn, Patrick Massot
-/

import topology.separation

/-!
# The topological support of a function

In this file we define the topological support of a function `f`, `tsupport f`,
as the closure of the support of `f`.

Furthermore, we say that `f` has compact support if the topological support of `f` is compact.

## Main definitions

* `function.mul_support`
* `function.has_compact_mul_support`

## Implementation Notes

* We write all lemmas for multiplicative functions, and use `@[to_additive]` to get the more common
  additive versions.
* We do not put the definitions in the `function` namespace, following many other topological
  definitions that are in the root namespace (compare `embedding` vs `function.embedding`).
-/

open function set filter
open_locale topological_space

variables {X Œ± Œ±' Œ≤ Œ≥ Œ¥ M E : Type*}

section one
variables [has_one Œ±]
variables [topological_space X]

-- todo: add mul_tsupport -> tsupport to to_additive dictionary

/-- The topological support of a function is the closure of its support, i.e. the closure of the
  set of all elements where the function is not equal to 1. -/
@[to_additive tsupport
/-" The topological support of a function is the closure of its support. i.e. the closure of the
  set of all elements where the function is nonzero. "-/]
def mul_tsupport (f : X ‚Üí Œ±) : set X := closure (mul_support f)

@[to_additive]
lemma subset_mul_tsupport (f : X ‚Üí Œ±) : mul_support f ‚äÜ mul_tsupport f :=
subset_closure

@[to_additive]
lemma is_closed_mul_tsupport (f : X ‚Üí Œ±) : is_closed (mul_tsupport f) :=
is_closed_closure

@[to_additive]
lemma mul_tsupport_eq_empty_iff {f : X ‚Üí Œ±} : mul_tsupport f = ‚àÖ ‚Üî f = 1 :=
by rw [mul_tsupport, closure_empty_iff, mul_support_eq_empty_iff]

@[to_additive]
lemma image_eq_zero_of_nmem_mul_tsupport {f : X ‚Üí Œ±} {x : X} (hx : x ‚àâ mul_tsupport f) : f x = 1 :=
mul_support_subset_iff'.mp (subset_mul_tsupport f) x hx

end one

section

variables [topological_space Œ±] [topological_space Œ±']
variables [has_one Œ≤] [has_one Œ≥] [has_one Œ¥]
variables {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤} {f‚ÇÇ : Œ± ‚Üí Œ≥} {m : Œ≤ ‚Üí Œ≥ ‚Üí Œ¥} {x : Œ±}

@[to_additive]
lemma not_mem_closure_mul_support_iff_eventually_eq : x ‚àâ mul_tsupport f ‚Üî f =·∂†[ùìù x] 1 :=
by simp_rw [mul_tsupport, mem_closure_iff_nhds, not_forall, not_nonempty_iff_eq_empty,
    ‚Üê disjoint_iff_inter_eq_empty, disjoint_mul_support_iff, eventually_eq_iff_exists_mem]

/-- A function `f` *has compact multiplicative support* or is *compactly supported* if the closure
of the multiplicative support of `f` is compact. In a T‚ÇÇ space this is equivalent to `f` being equal
to `1` outside a compact set. -/
@[to_additive
/-" A function `f` *has compact support* or is *compactly supported* if the closure of the support
of `f` is compact. In other words: `f` is equal to `0` outside a compact set. "-/]
def has_compact_mul_support (f : Œ± ‚Üí Œ≤) : Prop :=
is_compact (mul_tsupport f)

@[to_additive]
lemma has_compact_mul_support_def :
  has_compact_mul_support f ‚Üî is_compact (closure (mul_support f)) :=
by refl

@[to_additive]
lemma exists_compact_iff_has_compact_mul_support [t2_space Œ±] :
  (‚àÉ K : set Œ±, is_compact K ‚àß ‚àÄ x ‚àâ K, f x = 1) ‚Üî has_compact_mul_support f :=
by simp_rw [‚Üê nmem_mul_support, ‚Üê mem_compl_iff, ‚Üê subset_def, compl_subset_compl,
    has_compact_mul_support_def, exists_compact_superset_iff]

@[to_additive]
lemma has_compact_mul_support.intro [t2_space Œ±] {K : set Œ±}
  (hK : is_compact K) (hfK : ‚àÄ x ‚àâ K, f x = 1) : has_compact_mul_support f :=
exists_compact_iff_has_compact_mul_support.mp ‚ü®K, hK, hfK‚ü©

@[to_additive]
lemma has_compact_mul_support.is_compact (hf : has_compact_mul_support f) :
  is_compact (mul_tsupport f) :=
hf

@[to_additive]
lemma has_compact_mul_support.mono' {f' : Œ± ‚Üí Œ≥} (hf : has_compact_mul_support f)
  (hff' : mul_support f' ‚äÜ mul_tsupport f) : has_compact_mul_support f' :=
compact_of_is_closed_subset hf is_closed_closure $ closure_minimal hff' is_closed_closure

@[to_additive]
lemma has_compact_mul_support.mono {f' : Œ± ‚Üí Œ≥} (hf : has_compact_mul_support f)
  (hff' : mul_support f' ‚äÜ mul_support f) : has_compact_mul_support f' :=
hf.mono' $ hff'.trans subset_closure

@[to_additive]
lemma has_compact_mul_support.comp_left (hf : has_compact_mul_support f) (hg : g 1 = 1) :
  has_compact_mul_support (g ‚àò f) :=
hf.mono $ mul_support_comp_subset hg f

@[to_additive]
lemma has_compact_mul_support_comp_left (hg : ‚àÄ {x}, g x = 1 ‚Üî x = 1) :
  has_compact_mul_support (g ‚àò f) ‚Üî has_compact_mul_support f :=
by simp_rw [has_compact_mul_support_def, mul_support_comp_eq g @hg f]

@[to_additive]
lemma has_compact_mul_support.comp‚ÇÇ_left (hf : has_compact_mul_support f)
  (hf‚ÇÇ : has_compact_mul_support f‚ÇÇ) (hm : m 1 1 = 1) :
  has_compact_mul_support (Œª x, m (f x) (f‚ÇÇ x)) :=
begin
  refine compact_of_is_closed_subset (hf.union hf‚ÇÇ) is_closed_closure _,
  refine closure_minimal (Œª x h2x, _) (is_closed_closure.union is_closed_closure) ,
  refine union_subset_union subset_closure subset_closure _,
  by_contra hx,
  simp_rw [mem_union, not_or_distrib, nmem_mul_support] at hx,
  apply h2x,
  simp_rw [hx.1, hx.2, hm]
end

end

section monoid

variables [topological_space Œ±] [monoid Œ≤]
variables {f f' : Œ± ‚Üí Œ≤} {x : Œ±}


@[to_additive]
lemma has_compact_mul_support.mul (hf : has_compact_mul_support f)
  (hf' : has_compact_mul_support f') : has_compact_mul_support (f * f') :=
by apply hf.comp‚ÇÇ_left hf' (mul_one 1) -- `by apply` speeds up elaboration

end monoid

section monoid

variables [topological_space Œ±] [monoid_with_zero Œ≤] [add_monoid Œ≥] [distrib_mul_action Œ≤ Œ≥]
variables {f : Œ± ‚Üí Œ≤} {f' : Œ± ‚Üí Œ≥} {x : Œ±}


lemma has_compact_support.smul (hf : has_compact_support f)
  (hf' : has_compact_support f') : has_compact_support (f ‚Ä¢ f') :=
by apply hf.comp‚ÇÇ_left hf' (smul_zero 0) -- `by apply` speeds up elaboration

end monoid

section monoid_with_zero

variables [topological_space Œ±] [mul_zero_class Œ≤]
variables {f f' : Œ± ‚Üí Œ≤} {x : Œ±}

@[to_additive]
lemma has_compact_support.mul (hf : has_compact_support f)
  (hf' : has_compact_support f') : has_compact_support (f * f') :=
by apply hf.comp‚ÇÇ_left hf' (mul_zero 0) -- `by apply` speeds up elaboration

end monoid_with_zero
