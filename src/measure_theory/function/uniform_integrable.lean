/-
Copyright (c) 2022 Kexing Ying. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kexing Ying
-/
import measure_theory.function.convergence_in_measure

/-!
# Uniform integrability


## Main results

-/

noncomputable theory
open_locale classical measure_theory nnreal ennreal topological_space

namespace measure_theory

open set filter topological_space

variables {Œ± Œ≤ Œπ : Type*} {m : measurable_space Œ±} {Œº : measure Œ±}
variables [measurable_space Œ≤] [normed_group Œ≤]

/-- Also known as uniformly absolutely continuous integrals. -/
def unif_integrable {m : measurable_space Œ±} (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (p : ‚Ñù‚â•0‚àû) (Œº : measure Œ±) : Prop :=
‚àÄ ‚¶ÉŒµ : ‚Ñù‚¶Ñ (hŒµ : 0 < Œµ), ‚àÉ (Œ¥ : ‚Ñù) (hŒ¥ : 0 < Œ¥), ‚àÄ i s, measurable_set s ‚Üí Œº s ‚â§ ennreal.of_real Œ¥ ‚Üí
snorm (s.indicator (f i)) p Œº < ennreal.of_real Œµ

section unif_integrable

variables [borel_space Œ≤] [second_countable_topology Œ≤] [is_finite_measure Œº] {p : ‚Ñù‚â•0‚àû}

lemma tendsto_indicator_ge_zero (f : Œ± ‚Üí Œ≤) (x : Œ±):
  tendsto (Œª M : ‚Ñï, {x | (M : ‚Ñù) ‚â§ ‚à•f x‚à•‚Çä}.indicator f x) at_top (ùìù 0) :=
begin
  refine @tendsto_at_top_of_eventually_const _ _ _ _ _ _ _ (nat.ceil (‚à•f x‚à•‚Çä : ‚Ñù) + 1) (Œª n hn, _),
  rw indicator_of_not_mem,
  simp only [not_le, mem_set_of_eq],
  refine lt_of_le_of_lt (nat.le_ceil _) _,
  refine lt_of_lt_of_le (lt_add_one _) _,
  norm_cast,
  rwa [ge_iff_le, coe_nnnorm] at hn,
end

lemma mem_‚Ñíp.integral_indicator_ge_le {f : Œ± ‚Üí Œ≤} (hf : mem_‚Ñíp f 1 Œº) (hmeas : measurable f)
  {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  ‚àÉ M : ‚Ñù, ‚à´‚Åª x, ‚à•{x | M ‚â§ ‚à•f x‚à•‚Çä}.indicator f x‚à•‚Çä ‚àÇŒº ‚â§ ennreal.of_real Œµ :=
begin
  have htendsto : ‚àÄ·µê x ‚àÇŒº, tendsto (Œª M : ‚Ñï, {x | (M : ‚Ñù) ‚â§ ‚à•f x‚à•‚Çä}.indicator f x) at_top (ùìù 0) :=
    univ_mem' (id $ Œª x, tendsto_indicator_ge_zero f x),
  have hmeas : ‚àÄ M : ‚Ñï, ae_measurable ({x | (M : ‚Ñù) ‚â§ ‚à•f x‚à•‚Çä}.indicator f) Œº,
  { cases hf,
    measurability },
  have hbound : has_finite_integral (Œª x, ‚à•f x‚à•) Œº,
  { rw mem_‚Ñíp_one_iff_integrable at hf,
    exact hf.norm.2 },
  have := tendsto_lintegral_norm_of_dominated_convergence hmeas hbound _ htendsto,
  { rw ennreal.tendsto_at_top ennreal.zero_ne_top at this,
    { obtain ‚ü®M, hM‚ü© := this (ennreal.of_real Œµ) (ennreal.of_real_pos.2 hŒµ),
      simp only [true_and, ge_iff_le, zero_tsub, zero_le,
                sub_zero, zero_add, coe_nnnorm, mem_Icc] at hM,
      refine ‚ü®M, _‚ü©,
      convert hM M le_rfl,
      ext1 x,
      simp only [coe_nnnorm, ennreal.of_real_eq_coe_nnreal (norm_nonneg _)],
      refl },
    { apply_instance } },
  { refine Œª n, univ_mem' (id $ Œª x, _),
    by_cases hx : (n : ‚Ñù) ‚â§ ‚à•f x‚à•,
    { dsimp,
      rwa indicator_of_mem },
    { dsimp,
      rw [indicator_of_not_mem, norm_zero],
      { exact norm_nonneg _ },
      { assumption } } }
end

lemma mem_‚Ñíp.snorm_indicator_ge_lt' {f : Œ± ‚Üí Œ≤} (hf : mem_‚Ñíp f p Œº) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  ‚àÉ M : ‚Ñù, snorm ({x | M ‚â§ ‚à•f x‚à•‚Çä}.indicator f) p Œº < ennreal.of_real Œµ :=
begin
  sorry
end

lemma mem_‚Ñíp.snorm_indicator_ge_lt {f : Œ± ‚Üí Œ≤} (hf : mem_‚Ñíp f p Œº) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  ‚àÉ (Œ¥ : ‚Ñù) (hŒ¥ : 0 < Œ¥), ‚àÄ s, measurable_set s ‚Üí Œº s ‚â§ ennreal.of_real Œ¥ ‚Üí
  snorm (s.indicator f) p Œº < ennreal.of_real Œµ :=
begin
  by_cases hp_ne_zero : p = 0,
  { refine ‚ü®1, zero_lt_one, Œª s hs hŒºs, hp_ne_zero.symm ‚ñ∏ _‚ü©,
    simp only [snorm_exponent_zero, ennreal.of_real_pos, hŒµ] },
  sorry
end

lemma unif_integrable_subsingleton [subsingleton Œπ] {f : Œπ ‚Üí Œ± ‚Üí Œ≤} (hf : ‚àÄ i, mem_‚Ñíp (f i) p Œº) :
  unif_integrable f p Œº :=
begin
  sorry
end

lemma unif_integrable_finite [fintype Œπ] {f : Œπ ‚Üí Œ± ‚Üí Œ≤} (hf : ‚àÄ i, mem_‚Ñíp (f i) p Œº) :
  unif_integrable f p Œº :=
begin
  sorry
end

lemma snorm_sub_le_of_dist_bdd (Œº : measure Œ±) [is_finite_measure Œº]
  {p : ‚Ñù‚â•0‚àû} (hp : p ‚â† 0) (hp' : p ‚â† ‚àû) {s : set Œ±} (hs : measurable_set[m] s)
  {f g : Œ± ‚Üí Œ≤} {c : ‚Ñù} (hc : 0 ‚â§ c) (hf : ‚àÄ x ‚àà s, dist (f x) (g x) ‚â§ c) :
  snorm (s.indicator (f - g)) p Œº ‚â§ ennreal.of_real c * Œº s ^ (1 / p.to_real) :=
begin
  have : ‚àÄ x, ‚à•s.indicator (f - g) x‚à• ‚â§ ‚à•s.indicator (Œª x, c) x‚à•,
  { intro x,
    by_cases hx : x ‚àà s,
    { rw [indicator_of_mem hx, indicator_of_mem hx, pi.sub_apply, ‚Üê dist_eq_norm,
          real.norm_eq_abs, abs_of_nonneg hc],
      exact hf x hx },
    { simp [indicator_of_not_mem hx] } },
  refine le_trans (snorm_mono this) _,
  rw snorm_indicator_const hs hp hp',
  by_cases hŒºs : Œº s = 0,
  { rw [hŒºs, ennreal.zero_rpow_of_pos, mul_zero, mul_zero],
    { exact le_rfl },
    { rw one_div_pos,
      exact ennreal.to_real_pos hp hp' } },
  { rw [ennreal.mul_le_mul_right, real.nnnorm_of_nonneg hc, ennreal.coe_nnreal_eq],
    { exact le_rfl },
    { intro h,
      obtain (h' | h') := ennreal.rpow_eq_zero_iff.1 h,
      { exact hŒºs h'.1 },
      { exact (measure_lt_top Œº s).ne h'.1 } },
    { intro h,
      obtain (h' | h') := ennreal.rpow_eq_top_iff.1 h,
      { exact hŒºs h'.1 },
      { exact (measure_lt_top Œº s).ne h'.1 } } }
end

-- We can remove the measurability assumption so this lemma should be private once we have
-- generalized it

-- To generalize the below to convergence in measure we need that convergence in measure implies
-- existence of convergent a.e. subsequence
-- We have this now: `tendsto_in_measure.exists_seq_tendsto_ae`

/-- A sequence of uniformly integrable functions which converges Œº-a.e. converges in Lp. -/
lemma tendsto_Lp_of_unif_integrable (hp : 1 ‚â§ p) (hp' : p ‚â† ‚àû) {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ n, measurable[m] (f n)) (hg : measurable g)
  (hg' : mem_‚Ñíp g p Œº) (hui : unif_integrable f p Œº)
  (hfg : ‚àÄ·µê x ‚àÇŒº, tendsto (Œª n, f n x) at_top (ùìù (g x))) :
  tendsto (Œª n, snorm (f n - g) p Œº) at_top (ùìù 0) :=
begin
  rw ennreal.tendsto_at_top ennreal.zero_ne_top,
  swap, apply_instance,
  intros Œµ hŒµ,
  by_cases Œµ < ‚àû,
  { by_cases hŒº : Œº = 0,
    { exact ‚ü®0, Œª n hn, by simp [hŒº]‚ü© },
    have hŒµ' : 0 < Œµ.to_real / 3 :=
      div_pos (ennreal.to_real_pos (gt_iff_lt.1 hŒµ).ne.symm h.ne) (by norm_num),
    have hdivp : 0 ‚â§ 1 / p.to_real,
    { refine one_div_nonneg.2 _,
      rw [‚Üê ennreal.zero_to_real, ennreal.to_real_le_to_real ennreal.zero_ne_top hp'],
      exact le_trans ennreal.zero_lt_one.le hp },
    have hpow : 0 < (measure_univ_nnreal Œº) ^ (1 / p.to_real) :=
      real.rpow_pos_of_pos (measure_univ_nnreal_pos hŒº) _,
    obtain ‚ü®Œ¥‚ÇÅ, hŒ¥‚ÇÅ, hsnorm‚ÇÅ‚ü© := hui hŒµ',
    obtain ‚ü®Œ¥‚ÇÇ, hŒ¥‚ÇÇ, hsnorm‚ÇÇ‚ü© := hg'.snorm_indicator_ge_lt hŒµ',
    obtain ‚ü®t, htm, ht‚ÇÅ, ht‚ÇÇ‚ü© := tendsto_uniformly_on_of_ae_tendsto' hf hg hfg (lt_min hŒ¥‚ÇÅ hŒ¥‚ÇÇ),
    rw metric.tendsto_uniformly_on_iff at ht‚ÇÇ,
    specialize ht‚ÇÇ (Œµ.to_real / (3 * measure_univ_nnreal Œº ^ (1 / p.to_real)))
      (div_pos (ennreal.to_real_pos (gt_iff_lt.1 hŒµ).ne.symm h.ne) (mul_pos (by norm_num) hpow)),
    obtain ‚ü®N, hN‚ü© := eventually_at_top.1 ht‚ÇÇ, clear ht‚ÇÇ,
    refine ‚ü®N, Œª n hn, _‚ü©,
    simp only [mem_Icc, true_and, zero_tsub, zero_le, zero_add],
    rw [‚Üê t.indicator_self_add_compl (f n - g)],
    refine le_trans (snorm_add_le ((((hf n).sub hg).indicator htm).ae_measurable)
      (((hf n).sub hg).indicator htm.compl).ae_measurable hp) _,
    rw [sub_eq_add_neg, indicator_add' t, indicator_neg'],
    refine le_trans (add_le_add_right (snorm_add_le ((hf n).indicator htm).ae_measurable
      (hg.indicator htm).neg.ae_measurable hp) _) _,
    have hnf : snorm (t.indicator (f n)) p Œº < ennreal.of_real (Œµ.to_real / 3),
    { refine hsnorm‚ÇÅ n t htm (le_trans ht‚ÇÅ _),
      rw ennreal.of_real_le_of_real_iff hŒ¥‚ÇÅ.le,
      exact min_le_left _ _ },
    have hng : snorm (t.indicator g) p Œº < ennreal.of_real (Œµ.to_real / 3),
    { refine hsnorm‚ÇÇ t htm (le_trans ht‚ÇÅ _),
      rw ennreal.of_real_le_of_real_iff hŒ¥‚ÇÇ.le,
      exact min_le_right _ _ },
    have hlt : snorm (t·∂ú.indicator (f n - g)) p Œº ‚â§ ennreal.of_real (Œµ.to_real / 3),
    { specialize hN n hn,
      have := snorm_sub_le_of_dist_bdd Œº ((lt_of_lt_of_le ennreal.zero_lt_one hp).ne.symm)
        hp' htm.compl _ (Œª x hx, (dist_comm (g x) (f n x) ‚ñ∏ (hN x hx).le :
        dist (f n x) (g x) ‚â§ Œµ.to_real / (3 * measure_univ_nnreal Œº ^ (1 / p.to_real)))),
      refine le_trans this _,
      rw [div_mul_eq_div_mul_one_div, ‚Üê ennreal.of_real_to_real (measure_lt_top Œº t·∂ú).ne,
          ennreal.of_real_rpow_of_nonneg ennreal.to_real_nonneg hdivp, ‚Üê ennreal.of_real_mul,
          mul_assoc],
      { refine ennreal.of_real_le_of_real (mul_le_of_le_one_right hŒµ'.le _),
        rw [mul_comm, mul_one_div, div_le_one],
        { refine real.rpow_le_rpow ennreal.to_real_nonneg
            (ennreal.to_real_le_of_le_of_real (measure_univ_nnreal_pos hŒº).le _) hdivp,
          rw [ennreal.of_real_coe_nnreal, coe_measure_univ_nnreal],
          exact measure_mono (subset_univ _) },
        { exact real.rpow_pos_of_pos (measure_univ_nnreal_pos hŒº) _ } },
      { refine mul_nonneg (hŒµ').le (one_div_nonneg.2 hpow.le) },
      { rw div_mul_eq_div_mul_one_div,
        exact mul_nonneg hŒµ'.le (one_div_nonneg.2 hpow.le) } },
    have : ennreal.of_real (Œµ.to_real / 3) = Œµ / 3,
    { rw [ennreal.of_real_div_of_pos (show (0 : ‚Ñù) < 3, by norm_num), ennreal.of_real_to_real h.ne],
      simp },
    rw this at hnf hng hlt,
    rw [snorm_neg, ‚Üê ennreal.add_thirds Œµ, ‚Üê sub_eq_add_neg],
    exact add_le_add_three hnf.le hng.le hlt },
  { rw [not_lt, top_le_iff] at h,
    exact ‚ü®0, Œª n hn, by simp [h]‚ü© }
end

lemma unif_integrable_of_tendsto_Lp {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ n, mem_‚Ñíp (f n) p Œº) (hg : mem_‚Ñíp g p Œº)
  (hfg : tendsto (Œª n, snorm (f n - g) p Œº) at_top (ùìù 0)) :
  unif_integrable f p Œº :=
begin
  sorry
end

-- should be convergence in measure instead over convergence a.e.
-- statement in current form is **false**
lemma ae_tendsto_of_tendsto_Lp {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ n, mem_‚Ñíp (f n) p Œº) (hg : mem_‚Ñíp g p Œº)
  (hfg : tendsto (Œª n, snorm (f n - g) p Œº) at_top (ùìù 0)) :
  ‚àÄ·µê x ‚àÇŒº, tendsto (Œª n, f n x) at_top (ùìù (g x)) :=
sorry

end unif_integrable

/-- In probability theory, a family of functions is uniformly integrable if it is uniformly
integrable in the measure theory sense and is uniformly bounded. -/
def uniform_integrable {m : measurable_space Œ±}
  (Œº : measure Œ±) (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (p : ‚Ñù‚â•0‚àû) : Prop :=
(‚àÄ i, measurable (f i)) ‚àß unif_integrable f p Œº ‚àß ‚àÉ C : ‚Ñù‚â•0, ‚àÄ i, snorm (f i) p Œº < C

variables {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {p : ‚Ñù‚â•0‚àû}

lemma uniform_integrable.mem_‚Ñíp (hf : uniform_integrable Œº f p) (i : Œπ) :
  mem_‚Ñíp (f i) p Œº :=
‚ü®(hf.1 i).ae_measurable, let ‚ü®_, _, hC‚ü© := hf.2 in lt_trans (hC i) ennreal.coe_lt_top‚ü©

end measure_theory
