/-
Copyright (c) 2022 Kexing Ying. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kexing Ying
-/
import measure_theory.integral.set_integral

/-!
# Uniform integrability

This file will be used in the future to define uniform integrability. Uniform integrability
is an important notion in both measure theory as well as probability theory. So far this file
only contains the Egorov theorem which will be used to prove the Vitali convergence theorem
which is one of the main results about uniform integrability.

## Main results

* `measure_theory.egorov`: Egorov's theorem which shows that a sequence of almost everywhere
  convergent functions converges uniformly except on an arbitrarily small set.

-/

noncomputable theory
open_locale classical measure_theory nnreal ennreal topological_space

namespace measure_theory

open set filter topological_space

variables {Œ± Œ≤ Œπ : Type*} {m : measurable_space Œ±} {Œº : measure Œ±}

section

variables [metric_space Œ≤]

/-! We will in this section prove Egorov's theorem. -/

namespace egorov

/-- Given a sequence of functions `f` and a function `g`, `not_convergent_seq f g i j` is the
set of elements such that `f k x` and `g x` are separated by at least `1 / (i + 1)` for some
`k ‚â• j`.

This definition is useful for Egorov's theorem. -/
def not_convergent_seq (f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤) (g : Œ± ‚Üí Œ≤) (i j : ‚Ñï) : set Œ± :=
‚ãÉ k (hk : j ‚â§ k), {x | (1 / (i + 1 : ‚Ñù)) < dist (f k x) (g x)}

variables {i j : ‚Ñï} {s : set Œ±} {Œµ : ‚Ñù} {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}

lemma mem_not_convergent_seq_iff {x : Œ±} : x ‚àà not_convergent_seq f g i j ‚Üî
  ‚àÉ k (hk : j ‚â§ k), (1 / (i + 1 : ‚Ñù)) < dist (f k x) (g x) :=
by { simp_rw [not_convergent_seq, mem_Union], refl }

lemma not_convergent_seq_antitone :
  antitone (not_convergent_seq f g i) :=
Œª j k hjk, Union‚ÇÇ_mono' $ Œª l hl, ‚ü®l, le_trans hjk hl, subset.rfl‚ü©

lemma measure_inter_not_convergent_seq_eq_zero
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) (i : ‚Ñï) :
  Œº (s ‚à© ‚ãÇ j, not_convergent_seq f g i j) = 0 :=
begin
  simp_rw [metric.tendsto_at_top, ae_iff] at hfg,
  rw [‚Üê nonpos_iff_eq_zero, ‚Üê hfg],
  refine measure_mono (Œª x, _),
  simp only [mem_inter_eq, mem_Inter, ge_iff_le, mem_not_convergent_seq_iff],
  push_neg,
  rintro ‚ü®hmem, hx‚ü©,
  refine ‚ü®hmem, 1 / (i + 1 : ‚Ñù), nat.one_div_pos_of_nat, Œª N, _‚ü©,
  obtain ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü© := hx N,
  exact ‚ü®n, hn‚ÇÅ, hn‚ÇÇ.le‚ü©
end

variables [second_countable_topology Œ≤] [measurable_space Œ≤] [borel_space Œ≤]

lemma not_convergent_seq_measurable_set
  (hf : ‚àÄ n, measurable[m] (f n)) (hg : measurable g) :
  measurable_set (not_convergent_seq f g i j) :=
measurable_set.Union (Œª k, measurable_set.Union_Prop $ Œª hk,
  measurable_set_lt measurable_const $ (hf k).dist hg)

lemma measure_not_convergent_seq_tendsto_zero
  (hf : ‚àÄ n, measurable (f n)) (hg : measurable g) (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) (i : ‚Ñï) :
  tendsto (Œª j, Œº (s ‚à© not_convergent_seq f g i j)) at_top (ùìù 0) :=
begin
  rw [‚Üê measure_inter_not_convergent_seq_eq_zero hfg, inter_Inter],
  exact tendsto_measure_Inter (Œª n, hsm.inter $ not_convergent_seq_measurable_set hf hg)
    (Œª k l hkl, inter_subset_inter_right _ $ not_convergent_seq_antitone hkl)
    ‚ü®0, (lt_of_le_of_lt (measure_mono $ inter_subset_left _ _) (lt_top_iff_ne_top.2 hs)).ne‚ü©
end

lemma exists_not_convergent_seq_lt (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, measurable (f n)) (hg : measurable g) (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) (i : ‚Ñï) :
  ‚àÉ j : ‚Ñï, Œº (s ‚à© not_convergent_seq f g i j) ‚â§ ennreal.of_real (Œµ * 2‚Åª¬π ^ i) :=
begin
  obtain ‚ü®N, hN‚ü© := (ennreal.tendsto_at_top ennreal.zero_ne_top).1
    (measure_not_convergent_seq_tendsto_zero hf hg hsm hs hfg i)
    (ennreal.of_real (Œµ * 2‚Åª¬π ^ i)) _,
  { rw zero_add at hN,
    exact ‚ü®N, (hN N le_rfl).2‚ü© },
  { rw [gt_iff_lt, ennreal.of_real_pos],
    exact mul_pos hŒµ (pow_pos (by norm_num) _) }
end

/-- Given some `Œµ > 0`, `not_convergent_seq_lt_index` provides the index such that
`not_convergent_seq` (intersected with a set of finite measure) has measure less than
`Œµ * 2‚Åª¬π ^ i`.

This definition is useful for Egorov's theorem. -/
def not_convergent_seq_lt_index (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, measurable (f n)) (hg : measurable g) (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) (i : ‚Ñï) : ‚Ñï :=
classical.some $ exists_not_convergent_seq_lt hŒµ hf hg hsm hs hfg i

lemma not_convergent_seq_lt_index_spec (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, measurable (f n)) (hg : measurable g) (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) (i : ‚Ñï) :
  Œº (s ‚à© not_convergent_seq f g i (not_convergent_seq_lt_index hŒµ hf hg hsm hs hfg i)) ‚â§
  ennreal.of_real (Œµ * 2‚Åª¬π ^ i) :=
classical.some_spec $ exists_not_convergent_seq_lt hŒµ hf hg hsm hs hfg i

/-- Given some `Œµ > 0`, `Union_not_convergent_seq` is the union of `not_convergent_seq` with
specific indicies such that `Union_not_convergent_seq` has measure less equal than `Œµ`.

This definition is useful for Egorov's theorem. -/
def Union_not_convergent_seq (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, measurable (f n)) (hg : measurable g) (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) : set Œ± :=
‚ãÉ i, s ‚à© not_convergent_seq f g i (not_convergent_seq_lt_index (half_pos hŒµ) hf hg hsm hs hfg i)

lemma Union_not_convergent_seq_measurable_set (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, measurable (f n)) (hg : measurable g) (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) :
  measurable_set $ Union_not_convergent_seq hŒµ hf hg hsm hs hfg :=
measurable_set.Union (Œª n, hsm.inter $ not_convergent_seq_measurable_set hf hg)

lemma measure_Union_not_convergent_seq (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, measurable (f n)) (hg : measurable g) (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) :
  Œº (Union_not_convergent_seq hŒµ hf hg hsm hs hfg) ‚â§ ennreal.of_real Œµ :=
begin
  refine le_trans (measure_Union_le _)
    (le_trans (ennreal.tsum_le_tsum $ not_convergent_seq_lt_index_spec
    (half_pos hŒµ) hf hg hsm hs hfg) _),
  simp_rw [ennreal.of_real_mul (half_pos hŒµ).le],
  rw [ennreal.tsum_mul_left, ‚Üê ennreal.of_real_tsum_of_nonneg, inv_eq_one_div,
      tsum_geometric_two, ‚Üê ennreal.of_real_mul (half_pos hŒµ).le, div_mul_cancel Œµ two_ne_zero],
  { exact le_rfl },
  { exact Œª n, pow_nonneg (by norm_num) _ },
  { rw [inv_eq_one_div],
    exact summable_geometric_two },
end

lemma Union_not_convergent_seq_subset (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, measurable (f n)) (hg : measurable g) (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) :
  Union_not_convergent_seq hŒµ hf hg hsm hs hfg ‚äÜ s :=
begin
  rw [Union_not_convergent_seq, ‚Üê inter_Union],
  exact inter_subset_left _ _,
end

lemma tendsto_uniformly_on_diff_Union_not_convergent_seq (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, measurable (f n)) (hg : measurable g) (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) :
  tendsto_uniformly_on f g at_top (s \ egorov.Union_not_convergent_seq hŒµ hf hg hsm hs hfg) :=
begin
  rw metric.tendsto_uniformly_on_iff,
  intros Œ¥ hŒ¥,
  obtain ‚ü®N, hN‚ü© := exists_nat_one_div_lt hŒ¥,
  rw eventually_at_top,
  refine ‚ü®egorov.not_convergent_seq_lt_index (half_pos hŒµ) hf hg hsm hs hfg N, Œª n hn x hx, _‚ü©,
  simp only [mem_diff, egorov.Union_not_convergent_seq, not_exists, mem_Union, mem_inter_eq,
    not_and, exists_and_distrib_left] at hx,
  obtain ‚ü®hxs, hx‚ü© := hx,
  specialize hx hxs N,
  rw egorov.mem_not_convergent_seq_iff at hx,
  push_neg at hx,
  rw dist_comm,
  exact lt_of_le_of_lt (hx n hn) hN,
end

end egorov

variables [second_countable_topology Œ≤] [measurable_space Œ≤] [borel_space Œ≤]
  {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤} {s : set Œ±}


/-- **Egorov's theorem**: If `f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤` is a sequence of measurable functions that converges
to `g : Œ± ‚Üí Œ≤` almost everywhere on a measurable set `s` of finite measure, then for all `Œµ > 0`,
there exists a subset `t ‚äÜ s` such that `Œº t ‚â§ Œµ` and `f` converges to `g` uniformly on `s \ t`.

In other words, a sequence of almost everywhere convergent functions converges uniformly except on
an arbitrarily small set. -/
theorem tendsto_uniformly_on_of_ae_tendsto
  (hf : ‚àÄ n, measurable (f n)) (hg : measurable g) (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  ‚àÉ t ‚äÜ s, measurable_set t ‚àß Œº t ‚â§ ennreal.of_real Œµ ‚àß tendsto_uniformly_on f g at_top (s \ t) :=
‚ü®egorov.Union_not_convergent_seq hŒµ hf hg hsm hs hfg,
 egorov.Union_not_convergent_seq_subset hŒµ hf hg hsm hs hfg,
 egorov.Union_not_convergent_seq_measurable_set hŒµ hf hg hsm hs hfg,
 egorov.measure_Union_not_convergent_seq hŒµ hf hg hsm hs hfg,
 egorov.tendsto_uniformly_on_diff_Union_not_convergent_seq hŒµ hf hg hsm hs hfg‚ü©

/-- Egorov's theorem for finite measure spaces. -/
lemma tendsto_uniformly_on_of_ae_tendsto' [is_finite_measure Œº]
  (hf : ‚àÄ n, measurable (f n)) (hg : measurable g)
  (hfg : ‚àÄ·µê x ‚àÇŒº, tendsto (Œª n, f n x) at_top (ùìù (g x))) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  ‚àÉ t, measurable_set t ‚àß Œº t ‚â§ ennreal.of_real Œµ ‚àß tendsto_uniformly_on f g at_top t·∂ú :=
begin
  obtain ‚ü®t, _, ht, htendsto‚ü© :=
    tendsto_uniformly_on_of_ae_tendsto hf hg measurable_set.univ (measure_ne_top Œº univ) _ hŒµ,
  { refine ‚ü®_, ht, _‚ü©,
    rwa compl_eq_univ_diff },
  { filter_upwards [hfg] with _ htendsto _ using htendsto, },
end

end

variables [measurable_space Œ≤] [normed_group Œ≤]

/-- Also known as uniformly absolutely continuous integrals. -/
def unif_integrable {m : measurable_space Œ±} (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (p : ‚Ñù‚â•0‚àû) (Œº : measure Œ±) : Prop :=
‚àÄ ‚¶ÉŒµ : ‚Ñù‚¶Ñ (hŒµ : 0 < Œµ), ‚àÉ (Œ¥ : ‚Ñù) (hŒ¥ : 0 < Œ¥), ‚àÄ i s, measurable_set s ‚Üí Œº s ‚â§ ennreal.of_real Œ¥ ‚Üí
snorm (s.indicator (f i)) p Œº < ennreal.of_real Œµ

section unif_integrable

variables [borel_space Œ≤] [second_countable_topology Œ≤] [is_finite_measure Œº] {p : ‚Ñù‚â•0‚àû}
-- useful lemmas:
-- #check snorm_ess_sup_lt_top_of_ae_bound
-- #check snorm_le_of_ae_bound

lemma mem_‚Ñíp.snorm_lt_measure {f : Œ± ‚Üí Œ≤} (hf : mem_‚Ñíp f p Œº) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  ‚àÉ (Œ¥ : ‚Ñù) (hŒ¥ : 0 < Œ¥), ‚àÄ s, measurable_set s ‚Üí Œº s ‚â§ ennreal.of_real Œ¥ ‚Üí
  snorm (s.indicator f) p Œº < ennreal.of_real Œµ :=
begin
  sorry
end

lemma unif_integrable_subsingleton [subsingleton Œπ] {f : Œπ ‚Üí Œ± ‚Üí Œ≤} (hf : ‚àÄ i, mem_‚Ñíp (f i) p Œº) :
  unif_integrable f p Œº :=
begin
  sorry
end

lemma unif_integrable_finite [fintype Œπ] {f : Œπ ‚Üí Œ± ‚Üí Œ≤} (hf : ‚àÄ i, mem_‚Ñíp (f i) p Œº) :
  unif_integrable f p Œº :=
begin
  sorry
end

lemma snorm_sub_le_of_dist_bdd (Œº : measure Œ±) [is_finite_measure Œº]
  {p : ‚Ñù‚â•0‚àû} (hp : p ‚â† 0) (hp' : p ‚â† ‚àû) {s : set Œ±} (hs : measurable_set[m] s)
  {f g : Œ± ‚Üí Œ≤} {c : ‚Ñù} (hc : 0 ‚â§ c) (hf : ‚àÄ x ‚àà s, dist (f x) (g x) ‚â§ c) :
  snorm (s.indicator (f - g)) p Œº ‚â§ ennreal.of_real c * Œº s ^ (1 / p.to_real) :=
begin
  have : ‚àÄ x, ‚à•s.indicator (f - g) x‚à• ‚â§ ‚à•s.indicator (Œª x, c) x‚à•,
  { intro x,
    by_cases hx : x ‚àà s,
    { rw [indicator_of_mem hx, indicator_of_mem hx, pi.sub_apply, ‚Üê dist_eq_norm,
          real.norm_eq_abs, abs_of_nonneg hc],
      exact hf x hx },
    { simp [indicator_of_not_mem hx] } },
  refine le_trans (snorm_mono this) _,
  rw snorm_indicator_const hs hp hp',
  by_cases hŒºs : Œº s = 0,
  { rw [hŒºs, ennreal.zero_rpow_of_pos, mul_zero, mul_zero],
    { exact le_rfl },
    { rw one_div_pos,
      exact ennreal.to_real_pos hp hp' } },
  { rw [ennreal.mul_le_mul_right, real.nnnorm_of_nonneg hc, ennreal.coe_nnreal_eq],
    { exact le_rfl },
    { intro h,
      obtain (h' | h') := ennreal.rpow_eq_zero_iff.1 h,
      { exact hŒºs h'.1 },
      { exact (measure_lt_top Œº s).ne h'.1 } },
    { intro h,
      obtain (h' | h') := ennreal.rpow_eq_top_iff.1 h,
      { exact hŒºs h'.1 },
      { exact (measure_lt_top Œº s).ne h'.1 } } }
end

-- We can remove the measurability assumption so this lemma should be private once we have
-- generalized it

-- To generalize the below to convergence in measure we need that convergence in measure implies
-- existence of convergent a.e. subsequence

/-- A sequence of uniformly integrable functions which converges Œº-a.e. converges in Lp. -/
lemma tendsto_Lp_of_unif_integrable (hp : 1 ‚â§ p) (hp' : p ‚â† ‚àû) {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ n, measurable[m] (f n)) (hg : measurable g)
  (hg' : mem_‚Ñíp g p Œº) (hui : unif_integrable f p Œº)
  (hfg : ‚àÄ·µê x ‚àÇŒº, tendsto (Œª n, f n x) at_top (ùìù (g x))) :
  tendsto (Œª n, snorm (f n - g) p Œº) at_top (ùìù 0) :=
begin
  rw ennreal.tendsto_at_top ennreal.zero_ne_top,
  swap, apply_instance,
  intros Œµ hŒµ,
  by_cases Œµ < ‚àû,
  { by_cases hŒº : Œº = 0,
    { exact ‚ü®0, Œª n hn, by simp [hŒº]‚ü© },
    have hŒµ' : 0 < Œµ.to_real / 3 :=
      div_pos (ennreal.to_real_pos (gt_iff_lt.1 hŒµ).ne.symm h.ne) (by norm_num),
    have hdivp : 0 ‚â§ 1 / p.to_real,
    { refine one_div_nonneg.2 _,
      rw [‚Üê ennreal.zero_to_real, ennreal.to_real_le_to_real ennreal.zero_ne_top hp'],
      exact le_trans ennreal.zero_lt_one.le hp },
    have hpow : 0 < (measure_univ_nnreal Œº) ^ (1 / p.to_real) :=
      real.rpow_pos_of_pos (measure_univ_nnreal_pos hŒº) _,
    obtain ‚ü®Œ¥‚ÇÅ, hŒ¥‚ÇÅ, hsnorm‚ÇÅ‚ü© := hui hŒµ',
    obtain ‚ü®Œ¥‚ÇÇ, hŒ¥‚ÇÇ, hsnorm‚ÇÇ‚ü© := hg'.snorm_lt_measure hŒµ',
    obtain ‚ü®t, htm, ht‚ÇÅ, ht‚ÇÇ‚ü© := tendsto_uniformly_on_of_ae_tendsto' hf hg hfg (lt_min hŒ¥‚ÇÅ hŒ¥‚ÇÇ),
    rw metric.tendsto_uniformly_on_iff at ht‚ÇÇ,
    specialize ht‚ÇÇ (Œµ.to_real / (3 * measure_univ_nnreal Œº ^ (1 / p.to_real)))
      (div_pos (ennreal.to_real_pos (gt_iff_lt.1 hŒµ).ne.symm h.ne) (mul_pos (by norm_num) hpow)),
    obtain ‚ü®N, hN‚ü© := eventually_at_top.1 ht‚ÇÇ, clear ht‚ÇÇ,
    refine ‚ü®N, Œª n hn, _‚ü©,
    simp only [mem_Icc, true_and, zero_tsub, zero_le, zero_add],
    rw [‚Üê t.indicator_self_add_compl (f n - g)],
    refine le_trans (snorm_add_le ((((hf n).sub hg).indicator htm).ae_measurable)
      (((hf n).sub hg).indicator htm.compl).ae_measurable hp) _,
    rw [sub_eq_add_neg, indicator_add' t, indicator_neg'],
    refine le_trans (add_le_add_right (snorm_add_le ((hf n).indicator htm).ae_measurable
      (hg.indicator htm).neg.ae_measurable hp) _) _,
    have hnf : snorm (t.indicator (f n)) p Œº < ennreal.of_real (Œµ.to_real / 3),
    { refine hsnorm‚ÇÅ n t htm (le_trans ht‚ÇÅ _),
      rw ennreal.of_real_le_of_real_iff hŒ¥‚ÇÅ.le,
      exact min_le_left _ _ },
    have hng : snorm (t.indicator g) p Œº < ennreal.of_real (Œµ.to_real / 3),
    { refine hsnorm‚ÇÇ t htm (le_trans ht‚ÇÅ _),
      rw ennreal.of_real_le_of_real_iff hŒ¥‚ÇÇ.le,
      exact min_le_right _ _ },
    have hlt : snorm (t·∂ú.indicator (f n - g)) p Œº ‚â§ ennreal.of_real (Œµ.to_real / 3),
    { specialize hN n hn,
      have := snorm_sub_le_of_dist_bdd Œº ((lt_of_lt_of_le ennreal.zero_lt_one hp).ne.symm)
        hp' htm.compl _ (Œª x hx, (dist_comm (g x) (f n x) ‚ñ∏ (hN x hx).le :
        dist (f n x) (g x) ‚â§ Œµ.to_real / (3 * measure_univ_nnreal Œº ^ (1 / p.to_real)))),
      refine le_trans this _,
      rw [div_mul_eq_div_mul_one_div, ‚Üê ennreal.of_real_to_real (measure_lt_top Œº t·∂ú).ne,
          ennreal.of_real_rpow_of_nonneg ennreal.to_real_nonneg hdivp, ‚Üê ennreal.of_real_mul,
          mul_assoc],
      { refine ennreal.of_real_le_of_real (mul_le_of_le_one_right hŒµ'.le _),
        rw [mul_comm, mul_one_div, div_le_one],
        { refine real.rpow_le_rpow ennreal.to_real_nonneg
            (ennreal.to_real_le_of_le_of_real (measure_univ_nnreal_pos hŒº).le _) hdivp,
          rw [ennreal.of_real_coe_nnreal, coe_measure_univ_nnreal],
          exact measure_mono (subset_univ _) },
        { exact real.rpow_pos_of_pos (measure_univ_nnreal_pos hŒº) _ } },
      { refine mul_nonneg (hŒµ').le (one_div_nonneg.2 hpow.le) },
      { rw div_mul_eq_div_mul_one_div,
        exact mul_nonneg hŒµ'.le (one_div_nonneg.2 hpow.le) } },
    have : ennreal.of_real (Œµ.to_real / 3) = Œµ / 3,
    { rw [ennreal.of_real_div_of_pos (show (0 : ‚Ñù) < 3, by norm_num), ennreal.of_real_to_real h.ne],
      simp },
    rw this at hnf hng hlt,
    rw [snorm_neg, ‚Üê ennreal.add_thirds Œµ, ‚Üê sub_eq_add_neg],
    exact add_le_add_three hnf.le hng.le hlt },
  { rw [not_lt, top_le_iff] at h,
    exact ‚ü®0, Œª n hn, by simp [h]‚ü© }
end

lemma unif_integrable_of_tendsto_Lp {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ n, mem_‚Ñíp (f n) p Œº) (hg : mem_‚Ñíp g p Œº)
  (hfg : tendsto (Œª n, snorm (f n - g) p Œº) at_top (ùìù 0)) :
  unif_integrable f p Œº :=
begin
  sorry
end

-- should be convergence in measure instead over convergence a.e.
-- statement in current form is **false**
lemma ae_tendsto_of_tendsto_Lp {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ n, mem_‚Ñíp (f n) p Œº) (hg : mem_‚Ñíp g p Œº)
  (hfg : tendsto (Œª n, snorm (f n - g) p Œº) at_top (ùìù 0)) :
  ‚àÄ·µê x ‚àÇŒº, tendsto (Œª n, f n x) at_top (ùìù (g x)) :=
sorry

end unif_integrable

/-- In probability theory, a family of functions is uniformly integrable if it is uniformly
integrable in the measure theory sense and is uniformly bounded. -/
def uniform_integrable {m : measurable_space Œ±}
  (Œº : measure Œ±) (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (p : ‚Ñù‚â•0‚àû) : Prop :=
(‚àÄ i, measurable (f i)) ‚àß unif_integrable f p Œº ‚àß ‚àÉ C : ‚Ñù‚â•0, ‚àÄ i, snorm (f i) p Œº < C

variables {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {p : ‚Ñù‚â•0‚àû}

lemma uniform_integrable.mem_‚Ñíp (hf : uniform_integrable Œº f p) (i : Œπ) :
  mem_‚Ñíp (f i) p Œº :=
‚ü®(hf.1 i).ae_measurable, let ‚ü®_, _, hC‚ü© := hf.2 in lt_trans (hC i) ennreal.coe_lt_top‚ü©

end measure_theory
