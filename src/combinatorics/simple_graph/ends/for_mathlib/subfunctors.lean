import category_theory.types
import category_theory.functor
import data.set.function

universes u v w

open category_theory

namespace category_theory.functor


def subfunctor {C : Type u} [category C] (F : C ‚•§ Type v)
  (obj : ‚àÄ c, set $ F.obj c)
  (map : ‚àÄ (c d : C) (m : c ‚ü∂ d), set.maps_to (F.map m) (obj c) (obj d)) : C ‚•§ Type v :=
{ obj := Œª c, subtype (obj c),
  map := Œª c d m, set.maps_to.restrict _ _ _ (map c d m),
  map_id' := by {intro, ext, simp only [map_id, set.maps_to.coe_restrict_apply, types_id_apply], },
  map_comp' := by {intros, ext, simp only [map_comp, set.maps_to.coe_restrict_apply, types_comp_apply], },}

lemma subfunctor.ext {C : Type u} [category C] (F : C ‚•§ Type v)
  (obj‚ÇÅ : ‚àÄ c, set $ F.obj c)
  (map‚ÇÅ : ‚àÄ (c d : C) (m : c ‚ü∂ d), set.maps_to (F.map m) (obj‚ÇÅ c) (obj‚ÇÅ d))
  (obj‚ÇÇ : ‚àÄ c, set $ F.obj c)
  (map‚ÇÇ : ‚àÄ (c d : C) (m : c ‚ü∂ d), set.maps_to (F.map m) (obj‚ÇÇ c) (obj‚ÇÇ d)) :
  (‚àÄ c, obj‚ÇÅ c = obj‚ÇÇ c) ‚Üí F.subfunctor obj‚ÇÅ map‚ÇÅ = F.subfunctor obj‚ÇÇ map‚ÇÇ :=
begin
  rintro objeq,
  have : obj‚ÇÅ = obj‚ÇÇ := funext objeq,
  subst this,
end

-- Thanks Andrew Yang and _Adam Topaz_ for this snippet!
def subfunctor.iso {C : Type u} [category C] (F : C ‚•§ Type v)
  (obj‚ÇÅ : ‚àÄ c, set $ F.obj c)
  (map‚ÇÅ : ‚àÄ (c d : C) (m : c ‚ü∂ d), set.maps_to (F.map m) (obj‚ÇÅ c) (obj‚ÇÅ d))
  (obj‚ÇÇ : ‚àÄ c, set $ F.obj c)
  (map‚ÇÇ : ‚àÄ (c d : C) (m : c ‚ü∂ d), set.maps_to (F.map m) (obj‚ÇÇ c) (obj‚ÇÇ d)) :
  (‚àÄ c, obj‚ÇÅ c = obj‚ÇÇ c) ‚Üí (F.subfunctor obj‚ÇÅ map‚ÇÅ ‚âÖ F.subfunctor obj‚ÇÇ map‚ÇÇ) := Œª objeq,
nat_iso.of_components
(Œª X, equiv.to_iso $ equiv.subtype_equiv_prop $ objeq _ ) (by tidy)


def subtype_functor {C : Type u} [category C] (F : C ‚•§ Type v)
  (obj : ‚àÄ c, set $ F.obj c)
  (map : ‚àÄ (c d : C) (m : c ‚ü∂ d), set.maps_to (F.map m) (obj c) (obj d)) : C ‚•§ Type v :=
{ obj := Œª c, subtype (obj c),
  map := Œª c d m ‚ü®x, p‚ü©, ‚ü®F.map m x, by {apply map, exact p,}‚ü©,
  map_id' := by {intro, ext ‚ü®_, _‚ü©, show F.map (ùüô X) x_val = _, rw [F.map_id], refl,},
  map_comp' := by {intros, ext ‚ü®_, _‚ü©, show F.map (f ‚â´ g) x_val = _, rw [F.map_comp], refl,} }


lemma subfunctor.obj_eq {C : Type u} [category C] (F : C ‚•§ Type v)
  (obj : ‚àÄ c, set $ F.obj c)
  (map : ‚àÄ (c d : C) (m : c ‚ü∂ d), set.maps_to (F.map m) (obj c) (obj d)) :
    ‚àÄ c, (F.subfunctor obj map).obj c = subtype (obj c) := by {intro, refl,}

lemma subfunctor.map_eq {C : Type u} [category C] (F : C ‚•§ Type v)
  (obj : ‚àÄ c, set $ F.obj c)
  (map : ‚àÄ (c d : C) (m : c ‚ü∂ d), set.maps_to (F.map m) (obj c) (obj d)) :
    ‚àÄ (c d : C), ‚àÄ f : c ‚ü∂ d, (F.subfunctor obj map).map f = subtype.map (F.map f) (Œª a, by show_term{
      show a ‚àà obj c ‚Üí (F.map f a) ‚àà obj d,
    apply map,})  := by {intros, refl,}


lemma subtype_functor_eq_subfunctor {C : Type u} [category C] (F : C ‚•§ Type v)
  (obj : ‚àÄ c, set $ F.obj c)
  (map : ‚àÄ (c d : C) (m : c ‚ü∂ d), set.maps_to (F.map m) (obj c) (obj d)) :
  subfunctor F obj map = subtype_functor F obj map := by {
    apply ext,
    {intros, ext ‚ü®_, _‚ü©, refl,},
    {intros, refl,} }

end category_theory.functor
