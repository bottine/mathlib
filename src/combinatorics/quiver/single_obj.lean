import combinatorics.quiver.symmetric

namespace quiver

def single_obj (Œ± : Type*) : Type := unit

namespace single_obj

variables (Œ± Œ≤ Œ≥ : Type*)

instance : quiver (single_obj Œ±) := ‚ü®Œª _ _, Œ±‚ü©

/-- The single object in `single_obj Œ±`. -/
def star : single_obj Œ± := unit.star

def has_reverse (rev : Œ± ‚Üí Œ±) : has_reverse (single_obj Œ±) := ‚ü®Œª _ _, rev‚ü©
def has_involutive_reverse (rev : Œ± ‚Üí Œ±) (h : function.involutive rev) :
  has_involutive_reverse (single_obj Œ±) :=
{ to_has_reverse := has_reverse Œ± rev,
  inv' := Œª _ _, h}

variables {Œ± Œ≤ Œ≥}

@[simps] def to_hom : Œ± ‚âÉ (star Œ± ‚ü∂ star Œ±) := equiv.refl _

@[simps] def fun_equiv_prefunctor :
  (Œ± ‚Üí Œ≤) ‚âÉ (single_obj Œ± ‚ü∂q single_obj Œ≤) :=
{ to_fun := Œª f, ‚ü®id, Œª _ _, f‚ü©,
  inv_fun := Œª f a, f.map (to_hom a),
  left_inv := Œª _, rfl,
  right_inv :=  Œª f, by cases f; obviously }

@[simp] lemma fun_equiv_prefunctor_id : fun_equiv_prefunctor id = ùüôq (single_obj Œ±) := rfl
@[simp] lemma fun_equiv_prefunctor_symm_id :
  fun_equiv_prefunctor.symm (ùüôq (single_obj Œ±)) = id := rfl
@[simp] lemma fun_equiv_prefunctor_comp (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ≥) :
  fun_equiv_prefunctor (g ‚àò f) = (fun_equiv_prefunctor f ‚â´q fun_equiv_prefunctor g) := rfl
@[simp] lemma fun_equiv_prefunctor_symm_comp (f : single_obj Œ± ‚ü∂q single_obj Œ≤)
  (g : single_obj Œ≤ ‚ü∂q single_obj Œ≥) : fun_equiv_prefunctor.symm (f ‚â´q g) =
  (fun_equiv_prefunctor.symm g ‚àò fun_equiv_prefunctor.symm f) :=
by simp only [equiv.symm_apply_eq, fun_equiv_prefunctor_comp, equiv.apply_symm_apply]

def path_to_list : Œ† {x : single_obj Œ±}, path (star Œ±) x ‚Üí list Œ±
| _ path.nil := []
| _ (path.cons p a) := a :: (path_to_list p)

@[simp] lemma path_to_list_nil : path_to_list path.nil = ([] : list Œ±) := rfl
@[simp] lemma path_to_list_cons {x y : single_obj Œ±} (p : path (star Œ±) x) (a : x ‚ü∂ y) :
  path_to_list (p.cons a) = a :: path_to_list p := rfl

def list_to_path : list Œ± ‚Üí path (star Œ±) (star Œ±)
| [] := path.nil
| (a :: l) := (list_to_path l).cons a

@[simp] lemma list_to_path_nil : list_to_path ([] : list Œ±) = path.nil := rfl
@[simp] lemma list_to_path_cons (l : list Œ±) (a : Œ±) :
  list_to_path (a :: l) = (list_to_path l).cons a := rfl

lemma path_to_list_to_path {x : single_obj Œ±} (p : path (star Œ±) x) :
  list_to_path (path_to_list p) == p :=
by { induction p with y z p a ih, refl, tidy }

lemma list_to_path_to_list (l : list Œ±) :
  path_to_list (list_to_path l) = l :=
by { induction l with a l ih, refl, simp [ih] }

@[simps] def path_equiv_list : path (star Œ±) (star Œ±) ‚âÉ list Œ± :=
‚ü®path_to_list, list_to_path, Œª p, eq_of_heq (path_to_list_to_path p), list_to_path_to_list‚ü©

end single_obj

end quiver
