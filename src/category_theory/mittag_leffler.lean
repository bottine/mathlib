/-
Copyright (c) 2022 R√©mi Bottinelli. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©mi Bottinelli
-/
import category_theory.filtered
import topology.category.Top.limits
import data.finset.basic
import category_theory.category.basic
import category_theory.full_subcategory
import data.set.finite
import data.fintype.basic
import category_theory.types

/-!
# Mittag Leffler

This files defines the Mittag-Leffler condition for cofiltered systems and (TODO) other properties
of such systems and their sections.

## Main definitions

Given the functor `F : J ‚•§ Type v`:

* For `j : J`, `F.eventual_range j` is the intersections of all ranges of morphisms `F.map f`
  where `f` has codomain `j`.
* `is_mittag_leffler` states that the functor `F : J ‚Üí Type v`, satisfies the Mittag-Leffler
  condition: the ranges of morphisms `F.map f` (with `f` having codomain `j`) stabilize.
* If `J` is cofiltered `F.to_eventual_ranges` is the subfunctor of `F` obtained by restriction
  to `F.eventual_range`.


## Main statements

* `is_mittag_leffler_of_exists_finite_range` shows that if `J` is cofiltered and for all `j`,
  there exists some `i` and `f : i ‚ü∂ j` such that the range of `F.map f` is finite, then
  `F` is Mittag-Leffler.
* `to_eventual_ranges_surjective` shows that if `F` is Mittag-Leffler, then `F.to_eventual_ranges`
  has all morphisms `F.map f` surjective.

## Todo

* Specialize to inverse systems and fintype systems.
* Prove [Stacks: Lemma 0597](https://stacks.math.columbia.edu/tag/0597)

## References

* [Stacks: Mittag-Leffler systems](https://stacks.math.columbia.edu/tag/0594)

## Tags

Mittag-Leffler, surjective, eventual range, inverse system,

-/


universes u v w

namespace category_theory
namespace functor

/--
The eventual range of the functor `F : J ‚•§ Type v` at index `j : J` is the intersection
of the ranges of all maps `F.map f` with `i : J` and `f : i ‚ü∂ j`.
-/
def eventual_range
  {J : Type u} [category J] (F : J ‚•§ Type v) (j : J) :=
‚ãÇ (i : J) (f : i ‚ü∂ j), set.range (F.map f)

/--
The functor `F : J ‚•§ Type v` satisfies the Mittag-Leffler condition if for all `j : J`,
there exists some `i : J` and `f : i ‚ü∂ j` such that for all `k : J` and `g : k ‚ü∂ j`, the range
of `F.map f` is contained in that of `F.map g`;
in other words (see `is_mittag_leffler_iff_eventual_range`), the eventual range at `j` is attained
by some `f : i ‚ü∂ j`.
-/
def is_mittag_leffler
  {J : Type u} [category J] (F : J ‚•§ Type v) :=
‚àÄ (j : J), ‚àÉ (i) (f : i ‚ü∂ j), ‚àÄ (k) (g : k ‚ü∂ j), set.range (F.map f) ‚äÜ set.range (F.map g)

lemma is_mittag_leffler_iff_eventual_range
  {J : Type u} [category J] (F : J ‚•§ Type v) :
  F.is_mittag_leffler ‚Üî ‚àÄ (j : J), ‚àÉ (i) (f : i ‚ü∂ j), F.eventual_range j = set.range (F.map f) :=
begin
  refine forall_congr (Œª j, exists_congr $ Œª i, exists_congr $ Œª f, _),
  split,
  { rintro h, apply subset_antisymm,
    { apply set.Inter‚ÇÇ_subset, },
    { apply set.subset_Inter‚ÇÇ,
      exact Œª k g, h k g, }, },
  { rintro h k g, rw h.symm,
    apply set.Inter‚ÇÇ_subset, },
end

lemma eventual_range_eq_range_precomp
  {J : Type u} [category J] (F : J ‚•§ Type v)
  {i j k : J} (f : i ‚ü∂ j) (g : j ‚ü∂ k) (h : F.eventual_range k = set.range (F.map g)) :
  F.eventual_range k = (set.range (F.map $ f ‚â´ g)) :=
begin
  apply subset_antisymm,
  { apply set.Inter‚ÇÇ_subset, },
  { simp only [h, types_comp, functor.map_comp], apply set.range_comp_subset_range, }
end

lemma is_mittag_leffler_of_surjective
  {J : Type u} [category J] (F : J ‚•§ Type v) :
  (‚àÄ (i j : J) (f : i ‚ü∂ j), (F.map f).surjective) ‚Üí F.is_mittag_leffler :=
begin
  refine Œª h j, ‚ü®j, ùüô j, Œª k g, subset_of_eq _‚ü©,
  simp only [map_id, types_id, set.range_id],
  exact (set.range_iff_surjective.mpr $ h k j g).symm,
end

/--
TODO: where does this go?
-/
lemma _root_.category_theory.is_cofiltered.cone_over_cospan
  {J : Type u} [category J] [is_cofiltered J] {i j j' : J} (f : j ‚ü∂ i) (f' : j' ‚ü∂ i)  :
  ‚àÉ (k : J) (g : k ‚ü∂ j) (g' : k ‚ü∂ j'), g ‚â´ f = g' ‚â´ f' :=
begin
  let h := is_cofiltered.min_to_left j j',
  let h' := is_cofiltered.min_to_right j j',
  let G := is_cofiltered.eq_hom (h ‚â´ f) (h' ‚â´ f'),
  refine ‚ü®_, G ‚â´ h, G ‚â´ h', _‚ü©,
  simp only [category.assoc, is_cofiltered.eq_condition],
end

lemma ranges_directed_of_is_cofiltered
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v) (j : J) :
  directed_on (‚äá) (set.range (Œª ( f : Œ£' (i : J), i ‚ü∂ j), set.range (F.map f.2))) :=
begin
  rintros _ ‚ü®‚ü®i, ij‚ü©, rfl‚ü© _ ‚ü®‚ü®k, kj‚ü©, rfl‚ü©,
  obtain ‚ü®l, li, lk, e‚ü© := category_theory.is_cofiltered.cone_over_cospan ij kj,
  refine ‚ü®set.range (F.map $ li ‚â´ ij), _‚ü©,
  rw [set.mem_range, exists_prop],
  refine ‚ü®‚ü®‚ü®l, li ‚â´ ij‚ü©, rfl‚ü©, ‚ü®_, _‚ü©‚ü©,
  rotate, rw e,
  all_goals
  { simp_rw [functor.map_comp, types_comp],
    apply set.range_comp_subset_range, },
end

/--
TODO: where does this go?
-/
private lemma directed_on_min {J : Type u} {s : set J} [preorder J] (h : directed_on (‚â•) s)
  (m ‚àà s) (min : ‚àÄ (a ‚àà s), a ‚â§ m ‚Üí a = m) : ‚àÄ a ‚àà s, m ‚â§ a :=
Œª a as, let ‚ü®x, xs, xm, xa‚ü© := h m H a as in (min x xs xm) ‚ñ∏ xa

lemma is_mittag_leffler_of_exists_finite_range
  {J : Type u} [category.{w} J] [is_cofiltered J] (F : J ‚•§ Type v)
  (h : ‚àÄ (j : J), ‚àÉ i (f : i ‚ü∂ j), (set.range (F.map f)).finite ) :
  F.is_mittag_leffler :=
begin
  rintro j,
  suffices : ‚àÉ (f : Œ£' i, i ‚ü∂ j), ‚àÄ (f' : Œ£' i, i ‚ü∂ j),
               set.range (F.map f'.2) ‚â§ set.range (F.map f.2) ‚Üí
                 set.range (F.map f'.2) = set.range (F.map f.2),
  { obtain ‚ü®‚ü®i, f‚ü©, fmin‚ü© := this,
    refine ‚ü®i, f, Œª i' f', _‚ü©,
    refine directed_on_min (F.ranges_directed_of_is_cofiltered j) _ ‚ü®‚ü®i, f‚ü©, rfl‚ü© _ _ ‚ü®‚ü®i', f'‚ü©, rfl‚ü©,
    simp only [set.mem_range, psigma.exists, forall_exists_index],
    rintro _ k g rfl gf,
    exact fmin ‚ü®k, g‚ü© gf, },

  let fins := subtype { f : Œ£' i, i ‚ü∂ j | (set.range (F.map f.2)).finite },
  haveI : nonempty fins := by { obtain ‚ü®i, f, fin‚ü© := h j, exact ‚ü®‚ü®‚ü®i, f‚ü©, fin‚ü©‚ü©, },
  let fmin := function.argmin (Œª (f : fins), f.prop.to_finset.card) nat.lt_wf,
  use fmin.val,
  rintro g gf,
  cases lt_or_eq_of_le gf,
  { have gfin : (set.range (F.map g.2)).finite := fmin.prop.subset gf,
    refine ((Œª (f : fins), f.prop.to_finset.card).not_lt_argmin nat.lt_wf ‚ü®g, gfin‚ü© _).elim,
    exact finset.card_lt_card (set.finite.to_finset_ssubset.mpr h_1), },
  { assumption, },
end

/--
The subfunctor of `F` obtained by restricting to the eventual range at each index.
-/
def to_eventual_ranges
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v) : J ‚•§ Type v :=
{ obj := Œª j, F.eventual_range j,
  map := Œª i j f, set.maps_to.restrict (F.map f) _ _ ( by
    { rintro x h,
      simp only [eventual_range, set.mem_Inter, set.mem_range] at h ‚ä¢,
      rintro i' f',
      obtain ‚ü®l, g, g', e‚ü© := category_theory.is_cofiltered.cone_over_cospan f f',
      obtain ‚ü®z, rfl‚ü© := h l g,
      use F.map g' z,
      replace e := congr_fun (congr_arg F.map e) z,
      simp_rw functor_to_types.map_comp_apply at e,
      exact e.symm, } ),
  map_id' := by
    { rintros, ext,
      simp only [set.maps_to.coe_restrict_apply, types_id_apply, map_id], },
  map_comp' := by
    { intros, ext,
      simp only [functor.map_comp, set.maps_to.coe_restrict_apply, types_comp_apply], }, }

/--
The sections of the functor `F : J ‚•§ Type v` are in bijection with the sections of
`F.eventual_ranges`.
-/
def to_eventual_ranges_sections_equiv
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v) :
  F.to_eventual_ranges.sections ‚âÉ F.sections :=
{ to_fun := Œª ss,
    ‚ü® Œª j, (ss.val j).val,
      Œª i j f, by simpa only [‚Üêsubtype.coe_inj, subtype.coe_mk] using ss.prop f ‚ü©,
  inv_fun := Œª s,
    ‚ü® Œª j,
      ‚ü® s.val j, by
        { dsimp [eventual_range],
          simp only [set.mem_Inter, set.mem_range],
          exact Œª i f, ‚ü®s.val i, s.prop f‚ü©, } ‚ü©,
      Œª i j ij, subtype.mk_eq_mk.mpr (s.prop ij)‚ü©,
  left_inv := by
    { simp only [function.right_inverse, function.left_inverse, subtype.val_eq_coe, set_coe.forall,
                 subtype.coe_mk, subtype.coe_eta, eq_self_iff_true, implies_true_iff], },
  right_inv := by
    { simp only [function.left_inverse, function.right_inverse, eq_self_iff_true, set_coe.forall,
                 implies_true_iff, subtype.coe_mk], } }

/--
If `F` satisfies the Mittag-Leffler condition, its restriction to eventual ranges is a surjective
functor.
-/
lemma to_eventual_ranges_surjective
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v) (ml : F.is_mittag_leffler) :
  ‚àÄ (i j : J) (f : i ‚ü∂ j), (F.to_eventual_ranges.map f).surjective :=
begin
  rintros i j f ‚ü®x, hx‚ü©,
  rw is_mittag_leffler_iff_eventual_range at ml,
  dsimp only [to_eventual_ranges],
  simp only [set_coe.exists],
  obtain ‚ü®i‚ÇÄ, ii‚ÇÄ, ei‚ÇÄ‚ü© := ml i,
  obtain ‚ü®j‚ÇÄ, jj‚ÇÄ, ej‚ÇÄ‚ü© := ml j,
  obtain ‚ü®k, ki‚ÇÄ, kj‚ÇÄ, e‚ü© := category_theory.is_cofiltered.cone_over_cospan (ii‚ÇÄ ‚â´ f) jj‚ÇÄ,
  let ei := F.eventual_range_eq_range_precomp ki‚ÇÄ ii‚ÇÄ ei‚ÇÄ,
  let ej := F.eventual_range_eq_range_precomp kj‚ÇÄ jj‚ÇÄ ej‚ÇÄ,
  obtain ‚ü®z, rfl‚ü© := ej.rec_on hx,
  use F.map (ki‚ÇÄ ‚â´ ii‚ÇÄ) z,
  simp_rw [ei, set.mem_range_self, exists_true_left, ‚Üêe, functor_to_types.map_comp_apply],
  refl,
end

/-- If `F` has all arrows surjective, then it "factors through a poset". -/
lemma thin_diagram_of_surjective
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v)
  (Fsur : ‚àÄ (i j : J) (f : i ‚ü∂ j), (F.map f).surjective) :
  ‚àÄ i j (f g : i ‚ü∂ j), F.map f = F.map g :=
begin
  rintro i j f g,
  let œÜ := is_cofiltered.eq_hom f g,
  suffices : F.map œÜ ‚â´ F.map f = F.map œÜ ‚â´ F.map g,
  { let œÜs := Fsur _ _ œÜ,
    rw ‚Üêcategory_theory.epi_iff_surjective at œÜs,
    exact œÜs.left_cancellation _ _ this, },
  simp_rw [‚Üêmap_comp, is_cofiltered.eq_condition],
end

/-- If `F` is nonempty at each index and Mittag-Leffler, then so is `F.to_eventual_ranges`. -/
instance to_eventual_ranges_nonempty
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v) (ml : F.is_mittag_leffler)
  [‚àÄ (j : J), nonempty (F.obj j)] : ‚àÄ (j : J), nonempty (F.to_eventual_ranges.obj j) :=
begin
  intro j, rw is_mittag_leffler_iff_eventual_range at ml,
  obtain ‚ü®i,f,h‚ü© := ml j,
  dsimp [to_eventual_ranges], rw h,
  apply set.nonempty.to_subtype,
  apply set.range_nonempty,
end

section sections_of_surjective
/--
Start with a surjective finite nonempty cofiltered system `F : J ‚•§ Type v`.
The assumption of surjectivity is cheap in that one can take `eventual_image` anyway, which preserve
both nonempty and finite.

Fix `j‚ÇÄ : J` and `x‚ÇÄ : F.obj j‚ÇÄ`.
The goal is to exhibit a section `s : F.sections` satisfying `s j‚ÇÄ = x‚ÇÄ`.

-/

variables
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v) [‚àÄ (j : J), finite (F.obj j)]
  {j‚ÇÄ : J} (x‚ÇÄ : F.obj j‚ÇÄ)

include j‚ÇÄ x‚ÇÄ

/-- The set of surjective subfunctors of F with `x‚ÇÄ` below -/
structure sub :=
  (obj : Œ† j, set (F.obj j))
  (sur_sub : ‚àÄ i j (f : i ‚ü∂ j), set.image (F.map f) (obj i) = obj j)
  (above : ‚àÄ i (f : i ‚ü∂ j‚ÇÄ), ‚àÉ x ‚àà obj i, (F.map f) x = x‚ÇÄ)

def sub_le (S T : F.sub x‚ÇÄ) : Prop := ‚àÄ (j : J), S.obj j ‚äÜ T.obj j

@[ext] lemma sub_ext {S T : F.sub x‚ÇÄ} (h : ‚àÄ j, S.obj j = T.obj j) : S = T :=
by { cases S, cases T, simp only at h ‚ä¢, ext j x, rw h j, }

/-- Careful: we invert the order to make using Zorn that bit easier. -/
instance : partial_order (F.sub x‚ÇÄ) :=
begin
  fconstructor,
  { exact Œª S T, sub_le F x‚ÇÄ T S, },
  { exact Œª S j, subset_refl (S.obj j), },
  { exact Œª R S T RS ST j, subset_trans (ST j) (RS j), },
  { exact Œª S T ST TS, sub_ext F x‚ÇÄ (Œªj,subset_antisymm (TS j) (ST j)), },
end

/--
The intersection of a nonempty chain of surjective subfunctors above `x‚ÇÄ`
is also a subfunctor above `x‚ÇÄ`.
-/
def chain_Inter  : ‚àÄ (c : set $ F.sub x‚ÇÄ), is_chain (F.sub_le x‚ÇÄ) c ‚Üí c.nonempty ‚Üí F.sub x‚ÇÄ :=
begin
  rintro c cchain cnempty,
  have mmin : ‚àÄ j, ‚àÉ (S : c), ‚àÄ (T : c), S.val.obj j ‚äÜ T.val.obj j, by
  { rintro j,
    let mcard : F.sub x‚ÇÄ ‚Üí ‚Ñï := by
    { rintro S,
      have : (S.obj j).finite, by
      { apply set.finite.subset,
        apply set.finite_univ,
        simp only [set.subset_univ], },
      exact this.to_finset.card, },
    let S := function.argmin_on mcard nat.lt_wf c cnempty,
    let Sc :=mcard.argmin_on_mem nat.lt_wf c cnempty,
    use ‚ü®S,Sc‚ü©,
    rintro ‚ü®T,Tc‚ü©,
    by_cases SeqT : S = T,
    { induction SeqT, refl, },
    { specialize cchain Sc Tc SeqT,
      cases cchain,
      { exact cchain j, },
      { by_contra',
        apply function.not_lt_argmin_on mcard nat.lt_wf c Tc,
        apply finset.card_lt_card,
        rw set.finite.to_finset_ssubset,
        exact ssubset_iff_subset_not_subset.mpr ‚ü®cchain j,this‚ü©, }, }, },
  refine ‚ü®Œª j, ‚ãÇ (S : c), S.val.obj j,_,_‚ü©,
  { rintro i j f,
    obtain ‚ü®Si,Simin‚ü© := mmin i,
    have : (‚ãÇ (S : c), S.val.obj i) = Si.val.obj i, by
    { refine subset_antisymm (set.Inter_subset _ _) (set.subset_Inter Simin), },
    rw this,
    apply subset_antisymm,
    apply set.subset_Inter,
    { rintro S, rw ‚ÜêS.val.sur_sub _ _ f,
      apply set.image_subset, apply Simin, },
    { rw Si.val.sur_sub _ _ f,
      apply set.Inter_subset, }, },
  { rintro i f,
    obtain ‚ü®Si,Simin‚ü© := mmin i,
    have : (‚ãÇ (S : c), S.val.obj i) = Si.val.obj i, by
    { refine subset_antisymm (set.Inter_subset _ _) (set.subset_Inter Simin), },
    rw this,
    apply Si.val.above, },
end

/-- The intersection is contained in any subfunctor in the chain. -/
lemma chain_Inter_le
  (c : set $ F.sub x‚ÇÄ) (cchain : is_chain (F.sub_le x‚ÇÄ) c) (cnempty : c.nonempty)
  (S : F.sub x‚ÇÄ) ( Sc : S ‚àà c) : F.sub_le x‚ÇÄ (chain_Inter F x‚ÇÄ c cchain cnempty) S :=
begin
  simp [upper_bounds, chain_Inter], rintro j, apply set.Inter‚ÇÇ_subset, exact Sc,
end

variables (Fs : ‚àÄ (i j : J) (f : i ‚ü∂ j), (F.map f).surjective)
include Fs

def sub_univ : F.sub x‚ÇÄ :=
{ obj := Œª j, set.univ,
  sur_sub := Œª i j f, by
  { simp only [set.image_univ], rw set.range_iff_surjective, apply Fs, },
  above := Œª i f, by
  { simp only [set.mem_univ, exists_true_left], apply Fs, } }

instance : nonempty (F.sub x‚ÇÄ) := ‚ü®F.sub_univ x‚ÇÄ Fs‚ü©

/--
Given a subfunctor and a point `x` in the section, with `x` mapping to `x‚ÇÄ`
this is the best approximation to the restriction to elements mapping to `x`.
-/
def restrict (S : F.sub x‚ÇÄ) {j‚ÇÅ : J} {x‚ÇÅ : F.obj j‚ÇÅ}
  (x‚ÇÅ‚ÇÄ : ‚àÉ f : j‚ÇÅ ‚ü∂ j‚ÇÄ, F.map f x‚ÇÅ = x‚ÇÄ) (x‚ÇÅS : x‚ÇÅ ‚àà S.obj j‚ÇÅ) : F.sub x‚ÇÄ :=
{ obj := Œª i,
  { y | y ‚àà S.obj i ‚àß ‚àÉ (k : J) (g : k ‚ü∂ j‚ÇÅ) (h : k ‚ü∂ i),
                      ‚àÉ (z : F.obj k), z ‚àà S.obj k ‚àß F.map g z = x‚ÇÅ ‚àß F.map h z = y },
  sur_sub := Œª i i' f, by
  { ext y, split,
    { rintro ‚ü®z,‚ü®zS,zH‚ü©,rfl‚ü©,
      simp only [‚ÜêS.sur_sub _ _ f, set.mem_image, set.mem_set_of_eq],
      use [z,zS],
      obtain ‚ü®k,g,h,z',z'S,rfl,rfl‚ü© := zH,
      use [k,g,h‚â´f,z',z'S,rfl],
      rw [‚Üêfunctor_to_types.map_comp_apply], },
    { rintro ‚ü®yS,‚ü®k,g,h,z,zS,rfl,rfl‚ü©‚ü©,
      let k' := is_cofiltered.min i k,
      let k'k := is_cofiltered.min_to_right i k,
      let k'i := is_cofiltered.min_to_left i k,
      rw ‚ÜêS.sur_sub _ _ k'k at zS,
      obtain ‚ü®z',z'S,rfl‚ü© := zS,
      simp only [set.mem_image, set.mem_set_of_eq, ‚ÜêS.sur_sub _ _ k'i],
      use [F.map k'i z', z',z'S,k', k'k ‚â´ g, k'i, z', z'S],
      { simp, },
      { simp_rw [‚Üêfunctor_to_types.map_comp_apply],
        apply congr_fun,
        apply thin_diagram_of_surjective F Fs, } } },
  above := Œª i f, by
  { obtain ‚ü®j‚ÇÅ‚ÇÄ,rfl‚ü© := x‚ÇÅ‚ÇÄ,
    let k := is_cofiltered.min i j‚ÇÅ,
    let h := is_cofiltered.min_to_left i j‚ÇÅ,
    let g := is_cofiltered.min_to_right i j‚ÇÅ,
    rw ‚ÜêS.sur_sub _ _ g at x‚ÇÅS,
    obtain ‚ü®z,zS,rfl‚ü© := x‚ÇÅS,
    simp only [set.mem_set_of_eq, ‚ÜêS.sur_sub _ _ h, set.mem_image],
    use [F.map h z, z, zS, k, g, h, z, zS, rfl, rfl],
    simp_rw [‚Üêfunctor_to_types.map_comp_apply],
    apply congr_fun _ z,
    apply thin_diagram_of_surjective F Fs, } }

/-- The restriction, at index `j‚ÇÅ`, contains only `x‚ÇÅ`. -/
lemma restrict_at (S : F.sub x‚ÇÄ) {j‚ÇÅ : J} {x‚ÇÅ : F.obj j‚ÇÅ}
  (x‚ÇÅ‚ÇÄ : ‚àÉ f : j‚ÇÅ ‚ü∂ j‚ÇÄ, F.map f x‚ÇÅ = x‚ÇÄ) (x‚ÇÅS : x‚ÇÅ ‚àà S.obj j‚ÇÅ) :
  (F.restrict x‚ÇÄ Fs S x‚ÇÅ‚ÇÄ x‚ÇÅS).obj j‚ÇÅ = {x‚ÇÅ} :=
begin
  ext y, split,
  { rintro ‚ü®yS,k,g,h,z,zS,rfl,rfl‚ü©,
    simp only [set.mem_singleton_iff],
    apply congr_fun, apply thin_diagram_of_surjective F Fs, },
  { simp only [set.mem_singleton_iff, set.mem_set_of_eq],
    rintro rfl,
    use [x‚ÇÅS, j‚ÇÅ, ùüô j‚ÇÅ, ùüô j‚ÇÅ],
    simp only [functor_to_types.map_id_apply, and_self, exists_eq_right],
    exact x‚ÇÅS, }
end

lemma restrict_le (S : F.sub x‚ÇÄ) {j‚ÇÅ : J} {x‚ÇÅ : F.obj j‚ÇÅ}
  (x‚ÇÅ‚ÇÄ : ‚àÉ f : j‚ÇÅ ‚ü∂ j‚ÇÄ, F.map f x‚ÇÅ = x‚ÇÄ) (x‚ÇÅS : x‚ÇÅ ‚àà S.obj j‚ÇÅ) :
  F.sub_le x‚ÇÄ (F.restrict x‚ÇÄ Fs S x‚ÇÅ‚ÇÄ x‚ÇÅS) S := Œª j x h, h.1

lemma restrict_ne (S : F.sub x‚ÇÄ) {j‚ÇÅ : J} {x‚ÇÅ : F.obj j‚ÇÅ}
  (x‚ÇÅ‚ÇÄ : ‚àÉ f : j‚ÇÅ ‚ü∂ j‚ÇÄ, F.map f x‚ÇÅ = x‚ÇÄ) (x‚ÇÅS : x‚ÇÅ ‚àà S.obj j‚ÇÅ)
  (hne : ‚àÉ y‚ÇÅ : F.obj j‚ÇÅ, y‚ÇÅ ‚àà S.obj j‚ÇÅ ‚àß y‚ÇÅ ‚â† x‚ÇÅ) : (F.restrict x‚ÇÄ Fs S x‚ÇÅ‚ÇÄ x‚ÇÅS) ‚â† S :=
begin
  rintro e,
  obtain ‚ü®y,yS,yne‚ü© := hne,
  apply yne,
  let := F.restrict_at x‚ÇÄ Fs S x‚ÇÅ‚ÇÄ x‚ÇÅS,
  rw e at this,
  rw this at yS,
  exact yS,
end

lemma singletons_of_min (S : F.sub x‚ÇÄ) (Smin : ‚àÄ T, S ‚â§ T ‚Üí T = S) : ‚àÄ j, ‚àÉ x, S.obj j = {x} :=
begin
  by_contra' notsing,
  obtain ‚ü®j,jnotsing‚ü© := notsing,
  let j‚ÇÅ := is_cofiltered.min j j‚ÇÄ,
  let h := is_cofiltered.min_to_left j j‚ÇÄ,
  let g := is_cofiltered.min_to_right j j‚ÇÄ,
  have : ‚àÄ x, x ‚àà S.obj j‚ÇÅ ‚Üí ‚àÉ y, y ‚àà S.obj j‚ÇÅ ‚àß y ‚â† x, by
  { rintro x xS, by_contra',
    apply jnotsing (F.map h x),
    rw ‚ÜêS.sur_sub _ _ h,
    ext y, split,
    { rintro ‚ü®z,zS,rfl‚ü©, simp [this z zS], },
    { simp only [set.mem_singleton_iff, set.mem_image], rintro rfl, refine ‚ü®x,xS,rfl‚ü©,
       } },
  obtain ‚ü®x‚ÇÅ,x‚ÇÅS,rfl‚ü© := S.above _ g,
  let T := F.restrict _ Fs S ‚ü®g,rfl‚ü© x‚ÇÅS,
  apply F.restrict_ne _ Fs S ‚ü®g,rfl‚ü©,
  exact this x‚ÇÅ x‚ÇÅS,
  apply Smin,
  apply F.restrict_le _ Fs S ‚ü®g,rfl‚ü©,
  exact x‚ÇÅS,
end

lemma exists_section_of_singletons (S : F.sub x‚ÇÄ) (hS : ‚àÄ j, ‚àÉ x, S.obj j = {x}) :
  ‚àÉ s : F.sections, s.val j‚ÇÄ = x‚ÇÄ :=
‚ü® ‚ü® Œª j, (hS j).some, by
    { rintro j j' f,
      apply set.eq_of_mem_singleton,
      rw [‚Üê(hS j').some_spec, ‚Üê(S.sur_sub _ _ f)],
      refine ‚ü®(hS j).some, _, rfl‚ü©,
      convert set.mem_singleton (hS j).some,
      exact (hS j).some_spec, } ‚ü©,
  by { obtain ‚ü®x,e‚ü© := hS j‚ÇÄ,
       obtain ‚ü®x‚ÇÅ,x‚ÇÅS,h‚ü© := S.above j‚ÇÄ (ùüô j‚ÇÄ),
       let := (hS j‚ÇÄ).some_spec,
       simp only [*, set.singleton_eq_singleton_iff, functor_to_types.map_id_apply,
                  set.mem_singleton_iff] at *, subst_vars,
       exact this.symm, }
     ‚ü©

lemma exists_section : ‚àÉ s : F.sections, s.val j‚ÇÄ = x‚ÇÄ :=
begin
  suffices : ‚àÉ (S : F.sub x‚ÇÄ), ‚àÄ (T : F.sub x‚ÇÄ), S ‚â§ T ‚Üí T = S,
  { obtain ‚ü®S,Smin‚ü© := this,
    apply F.exists_section_of_singletons x‚ÇÄ Fs S,
    apply F.singletons_of_min x‚ÇÄ Fs S Smin, },
  haveI : nonempty (F.sub x‚ÇÄ) := ‚ü®F.sub_univ x‚ÇÄ Fs‚ü©,
  apply @zorn_nonempty_partial_order (F.sub x‚ÇÄ),
  rintro c cchain cnempty,
  refine ‚ü®F.chain_Inter x‚ÇÄ c _ cnempty, F.chain_Inter_le x‚ÇÄ c _ cnempty‚ü©,
  { simp only [is_chain] at cchain ‚ä¢, convert cchain, funext, apply propext, tauto, },
end

end sections_of_surjective

end functor
end category_theory
